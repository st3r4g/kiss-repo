diff -ru orig/glfw/glfw.py kitty-0.18.1/glfw/glfw.py
--- orig/glfw/glfw.py	2020-07-19 11:33:05.762955318 +0200
+++ kitty-0.18.1/glfw/glfw.py	2020-07-19 11:36:21.986948787 +0200
@@ -96,7 +96,7 @@
         for p in ans.wayland_protocols:
             ans.sources.append(wayland_protocol_file_name(p))
             ans.all_headers.append(wayland_protocol_file_name(p, 'h'))
-        for dep in 'wayland-client wayland-cursor xkbcommon dbus-1'.split():
+        for dep in 'wayland-client wayland-cursor xkbcommon'.split():
             ans.cflags.extend(pkg_config(dep, '--cflags-only-I'))
             ans.ldpaths.extend(pkg_config(dep, '--libs'))
         has_memfd_create = test_compile(env.cc, '-Werror', src='''#define _GNU_SOURCE
diff -ru orig/glfw/input.c kitty-0.18.1/glfw/input.c
--- orig/glfw/input.c	2020-07-19 11:33:05.762955318 +0200
+++ kitty-0.18.1/glfw/input.c	2020-07-19 12:30:27.157840781 +0200
@@ -1025,11 +1025,7 @@
     assert(window != NULL);
 
     _GLFW_REQUIRE_INIT();
-#if defined(_GLFW_X11) || defined(_GLFW_WAYLAND) || defined(_GLFW_COCOA)
-    _glfwPlatformUpdateIMEState(window, which, a, b, c, d);
-#else
     (void)window; (void)which; (void)a; (void)b; (void)c; (void)d;
-#endif
 }
 
 GLFWAPI GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow* handle,
diff -ru orig/glfw/internal.h kitty-0.18.1/glfw/internal.h
--- orig/glfw/internal.h	2020-07-19 11:33:05.761955318 +0200
+++ kitty-0.18.1/glfw/internal.h	2020-07-19 12:28:28.988844714 +0200
@@ -714,7 +714,6 @@
 void _glfwPlatformSetWindowDecorated(_GLFWwindow* window, bool enabled);
 void _glfwPlatformSetWindowFloating(_GLFWwindow* window, bool enabled);
 void _glfwPlatformSetWindowOpacity(_GLFWwindow* window, float opacity);
-void _glfwPlatformUpdateIMEState(_GLFWwindow *w, int which, int a, int b, int c, int d);
 
 void _glfwPlatformPollEvents(void);
 void _glfwPlatformWaitEvents(void);
diff -ru orig/glfw/source-info.json kitty-0.18.1/glfw/source-info.json
--- orig/glfw/source-info.json	2020-07-19 11:33:05.761955318 +0200
+++ kitty-0.18.1/glfw/source-info.json	2020-07-19 11:38:12.332945115 +0200
@@ -56,14 +56,11 @@
       "posix_thread.h",
       "wl_cursors.h",
       "xkb_glfw.h",
-      "dbus_glfw.h",
-      "ibus_glfw.h",
       "backend_utils.h",
       "egl_context.h",
       "osmesa_context.h",
       "linux_joystick.h",
       "null_joystick.h",
-      "linux_notify.h",
       "main_loop.h"
     ],
     "protocols": [
@@ -82,14 +79,11 @@
       "wl_cursors.c",
       "posix_thread.c",
       "xkb_glfw.c",
-      "dbus_glfw.c",
-      "ibus_glfw.c",
       "egl_context.c",
       "osmesa_context.c",
       "backend_utils.c",
       "linux_joystick.c",
-      "null_joystick.c",
-      "linux_notify.c"
+      "null_joystick.c"
     ]
   },
   "wayland_protocols": [
diff -ru orig/glfw/wl_init.c kitty-0.18.1/glfw/wl_init.c
--- orig/glfw/wl_init.c	2020-07-19 11:33:05.761955318 +0200
+++ kitty-0.18.1/glfw/wl_init.c	2020-07-19 11:41:38.180938264 +0200
@@ -756,7 +756,6 @@
         _glfwInputError(GLFW_PLATFORM_ERROR,
                         "Wayland: Failed to initialize event loop data");
     }
-    glfw_dbus_init(&_glfw.wl.dbus, &_glfw.wl.eventLoopData);
     _glfw.wl.keyRepeatInfo.keyRepeatTimer = addTimer(&_glfw.wl.eventLoopData, "wayland-key-repeat", ms_to_monotonic_t(500ll), 0, true, dispatchPendingKeyRepeats, NULL, NULL);
     _glfw.wl.cursorAnimationTimer = addTimer(&_glfw.wl.eventLoopData, "wayland-cursor-animation", ms_to_monotonic_t(500ll), 0, true, animateCursorImage, NULL, NULL);
 
@@ -812,7 +811,6 @@
     }
 
     glfw_xkb_release(&_glfw.wl.xkb);
-    glfw_dbus_terminate(&_glfw.wl.dbus);
 
     if (_glfw.wl.cursor.handle)
     {
diff -ru orig/glfw/wl_platform.h kitty-0.18.1/glfw/wl_platform.h
--- orig/glfw/wl_platform.h	2020-07-19 11:33:05.760955318 +0200
+++ kitty-0.18.1/glfw/wl_platform.h	2020-07-19 11:39:33.587942410 +0200
@@ -239,7 +239,6 @@
     } keyRepeatInfo;
     id_type                     cursorAnimationTimer;
     _GLFWXKBData                xkb;
-    _GLFWDBUSData               dbus;
 
     _GLFWwindow*                pointerFocus;
     _GLFWwindow*                keyboardFocus;
diff -ru orig/glfw/wl_window.c kitty-0.18.1/glfw/wl_window.c
--- orig/glfw/wl_window.c	2020-07-19 11:33:05.760955318 +0200
+++ kitty-0.18.1/glfw/wl_window.c	2020-07-19 12:26:10.645849318 +0200
@@ -31,7 +31,6 @@
 #include "internal.h"
 #include "backend_utils.h"
 #include "memfd.h"
-#include "linux_notify.h"
 #include "../kitty/monotonic.h"
 
 #include <stdio.h>
@@ -821,9 +820,6 @@
         (void)num;
         EVDBG("dispatched %d Wayland events", num);
     }
-    glfw_ibus_dispatch(&_glfw.wl.xkb.ibus);
-    glfw_dbus_session_bus_dispatch();
-    EVDBG("other dispatch done");
     if (_glfw.wl.eventLoopData.wakeup_fd_ready) check_for_wakeup_events(&_glfw.wl.eventLoopData);
 }
 
@@ -2071,11 +2067,6 @@
     return err;
 }
 
-void
-_glfwPlatformUpdateIMEState(_GLFWwindow *w, int which, int a, int b, int c, int d) {
-    glfw_xkb_update_ime_state(w, &_glfw.wl.xkb, which, a, b, c, d);
-}
-
 static void
 frame_handle_redraw(void *data, struct wl_callback *callback, uint32_t time UNUSED) {
     _GLFWwindow* window = (_GLFWwindow*) data;
@@ -2120,11 +2111,3 @@
         wl_surface_commit(window->wl.surface);
     }
 }
-
-GLFWAPI unsigned long long glfwDBusUserNotify(const char *app_name, const char* icon, const char *summary, const char *body, const char *action_name, int32_t timeout, GLFWDBusnotificationcreatedfun callback, void *data) {
-    return glfw_dbus_send_user_notification(app_name, icon, summary, body, action_name, timeout, callback, data);
-}
-
-GLFWAPI void glfwDBusSetUserNotificationHandler(GLFWDBusnotificationactivatedfun handler) {
-    glfw_dbus_set_user_notification_activated_handler(handler);
-}
diff -ru orig/glfw/xkb_glfw.c kitty-0.18.1/glfw/xkb_glfw.c
--- orig/glfw/xkb_glfw.c	2020-07-19 11:33:05.760955318 +0200
+++ kitty-0.18.1/glfw/xkb_glfw.c	2020-07-19 11:45:58.044929615 +0200
@@ -312,7 +312,6 @@
         xkb_context_unref(xkb->context);
         xkb->context = NULL;
     }
-    glfw_ibus_terminate(&xkb->ibus);
 }
 
 bool
@@ -324,7 +323,6 @@
                         "Failed to initialize XKB context");
         return false;
     }
-    glfw_connect_to_ibus(&xkb->ibus);
     return true;
 }
 
@@ -518,65 +516,15 @@
 }
 
 void
-glfw_xkb_update_ime_state(_GLFWwindow *w, _GLFWXKBData *xkb, int which, int a, int b, int c, int d) {
-    int x = 0, y = 0;
-    switch(which) {
-        case 1:
-            glfw_ibus_set_focused(&xkb->ibus, a ? true : false);
-            break;
-        case 2:
-            _glfwPlatformGetWindowPos(w, &x, &y);
-            x += a; y += b;
-            glfw_ibus_set_cursor_geometry(&xkb->ibus, x, y, c, d);
-            break;
-    }
-}
-
-void
-glfw_xkb_key_from_ime(_GLFWIBUSKeyEvent *ev, bool handled_by_ime, bool failed) {
-    _GLFWwindow *window = _glfwWindowForId(ev->window_id);
-    if (failed && window && window->callbacks.keyboard) {
-        // notify application to remove any existing pre-edit text
-        GLFWkeyevent fake_ev;
-        _glfwInitializeKeyEvent(&fake_ev, GLFW_KEY_UNKNOWN, 0, GLFW_PRESS, 0);
-        fake_ev.ime_state = 1;
-        window->callbacks.keyboard((GLFWwindow*) window, &fake_ev);
-    }
-    static xkb_keycode_t last_handled_press_keycode = 0;
-    // We filter out release events that correspond to the last press event
-    // handled by the IME system. This won't fix the case of multiple key
-    // presses before a release, but is better than nothing. For that case
-    // you'd need to implement a ring buffer to store pending key presses.
-    xkb_keycode_t prev_handled_press = last_handled_press_keycode;
-    last_handled_press_keycode = 0;
-    bool is_release = ev->glfw_ev.action == GLFW_RELEASE;
-    debug("From IBUS: native_key: 0x%x name: %s is_release: %d\n", ev->glfw_ev.native_key, glfw_xkb_keysym_name(ev->glfw_ev.key), is_release);
-    if (window && !handled_by_ime && !(is_release && ev->glfw_ev.native_key == (int) prev_handled_press)) {
-        debug("↳ to application: glfw_keycode: 0x%x (%s) keysym: 0x%x (%s) action: %s %s text: %s\n",
-            ev->glfw_ev.native_key, _glfwGetKeyName(ev->glfw_ev.native_key), ev->glfw_ev.key, glfw_xkb_keysym_name(ev->glfw_ev.key),
-            (ev->glfw_ev.action == GLFW_RELEASE ? "RELEASE" : (ev->glfw_ev.action == GLFW_PRESS ? "PRESS" : "REPEAT")),
-            format_mods(ev->glfw_ev.mods), ev->glfw_ev.text
-        );
-
-        ev->glfw_ev.ime_state = 0;
-        _glfwInputKeyboard(window, &ev->glfw_ev);
-    } else debug("↳ discarded\n");
-    if (!is_release && handled_by_ime)
-      last_handled_press_keycode = ev->glfw_ev.native_key;
-}
-
-void
 glfw_xkb_handle_key_event(_GLFWwindow *window, _GLFWXKBData *xkb, xkb_keycode_t xkb_keycode, int action) {
     static char key_text[64] = {0};
     const xkb_keysym_t *syms, *clean_syms, *default_syms;
     xkb_keysym_t xkb_sym;
-    xkb_keycode_t code_for_sym = xkb_keycode, ibus_keycode = xkb_keycode;
+    xkb_keycode_t code_for_sym = xkb_keycode;
     GLFWkeyevent glfw_ev;
     _glfwInitializeKeyEvent(&glfw_ev, GLFW_KEY_UNKNOWN, 0, GLFW_PRESS, 0); // init with default values
 #ifdef _GLFW_WAYLAND
     code_for_sym += 8;
-#else
-    ibus_keycode -= 8;
 #endif
     debug("%s xkb_keycode: 0x%x ", action == GLFW_RELEASE ? "Release" : "Press", xkb_keycode);
     XKBStateGroup *sg = &xkb->states;
@@ -655,14 +603,5 @@
     glfw_ev.mods = sg->modifiers;
     glfw_ev.text = key_text;
 
-    _GLFWIBUSKeyEvent ibus_ev;
-    ibus_ev.glfw_ev = glfw_ev;
-    ibus_ev.ibus_keycode = ibus_keycode;
-    ibus_ev.window_id = window->id;
-    ibus_ev.ibus_keysym = syms[0];
-    if (ibus_process_key(&ibus_ev, &xkb->ibus)) {
-        debug("↳ to IBUS: keycode: 0x%x keysym: 0x%x (%s) %s\n", ibus_ev.ibus_keycode, ibus_ev.ibus_keysym, glfw_xkb_keysym_name(ibus_ev.ibus_keysym), format_mods(ibus_ev.glfw_ev.mods));
-    } else {
-        _glfwInputKeyboard(window, &glfw_ev);
-    }
+    _glfwInputKeyboard(window, &glfw_ev);
 }
diff -ru orig/glfw/xkb_glfw.h kitty-0.18.1/glfw/xkb_glfw.h
--- orig/glfw/xkb_glfw.h	2020-07-19 11:33:05.760955318 +0200
+++ kitty-0.18.1/glfw/xkb_glfw.h	2020-07-19 12:24:05.588853481 +0200
@@ -32,8 +32,6 @@
 #include <xkbcommon/xkbcommon-x11.h>
 #endif
 
-#include "ibus_glfw.h"
-
 typedef struct {
     struct xkb_state*       state;
     struct xkb_state*       clean_state;
@@ -63,7 +61,6 @@
     xkb_mod_mask_t          capsLockMask;
     xkb_mod_mask_t          numLockMask;
     xkb_mod_index_t         unknownModifiers[256];
-    _GLFWIBUSData           ibus;
 
 #ifdef _GLFW_X11
     int32_t                 keyboard_device_id;
@@ -92,5 +89,3 @@
 xkb_keysym_t glfw_xkb_sym_for_key(int key);
 void glfw_xkb_handle_key_event(_GLFWwindow *window, _GLFWXKBData *xkb, xkb_keycode_t keycode, int action);
 int glfw_xkb_keysym_from_name(const char *name, bool case_sensitive);
-void glfw_xkb_update_ime_state(_GLFWwindow *w, _GLFWXKBData *xkb, int which, int a, int b, int c, int d);
-void glfw_xkb_key_from_ime(_GLFWIBUSKeyEvent *ev, bool handled_by_ime, bool failed);
